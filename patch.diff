Subject: [PATCH] Micronaut Email Bug
---
Index: src/test/java/com/example/MicronautEmailBugTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/example/MicronautEmailBugTest.java b/src/test/java/com/example/MicronautEmailBugTest.java
--- a/src/test/java/com/example/MicronautEmailBugTest.java	(revision b4b82e27440d0aec17411d722c22f80d5e0eb77c)
+++ b/src/test/java/com/example/MicronautEmailBugTest.java	(date 1689599446037)
@@ -1,21 +1,69 @@
 package com.example;
 
+import io.micronaut.http.HttpStatus;
 import io.micronaut.runtime.EmbeddedApplication;
 import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
-import org.junit.jupiter.api.Test;
+import io.micronaut.test.support.TestPropertyProvider;
+import io.restassured.http.ContentType;
+import io.restassured.specification.RequestSpecification;
+import jakarta.inject.Inject;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.TestInstance;
+import org.testcontainers.containers.localstack.LocalStackContainer;
+import org.testcontainers.utility.DockerImageName;
+import software.amazon.awssdk.services.ses.SesClient;
+import software.amazon.awssdk.services.ses.model.VerifyDomainIdentityRequest;
 
-import jakarta.inject.Inject;
+import java.util.Map;
 
 @MicronautTest
-class MicronautEmailBugTest {
+@TestInstance(TestInstance.Lifecycle.PER_CLASS)
+class MicronautEmailBugTest implements TestPropertyProvider {
+    private static LocalStackContainer localStack = new LocalStackContainer(DockerImageName.parse("localstack/localstack:1.3.1"))
+            .withServices(LocalStackContainer.Service.SES);
+
+    static {
+        localStack.start();
+    }
 
     @Inject
-    EmbeddedApplication<?> application;
+    private SesClient sesClient;
+
+    @Inject
+    private EmbeddedApplication<?> application;
+
+    @Override
+    public Map<String, String> getProperties() {
+        return Map.of(
+                "aws.secretKey", localStack.getSecretKey(),
+                "aws.accessKeyId", localStack.getAccessKey(),
+                "aws.services.ses.endpoint-override", localStack.getEndpointOverride(LocalStackContainer.Service.SES).toString()
+        );
+    }
+
+    @BeforeEach
+    public void setUp() throws Exception {
+        sesClient.verifyDomainIdentity(VerifyDomainIdentityRequest.builder()
+                .domain("foobar.com")
+                .build());
+    }
 
     @Test
     void testItWorks() {
         Assertions.assertTrue(application.isRunning());
     }
 
+    @Test
+    void foo(RequestSpecification spec) {
+        spec
+                .when()
+                .contentType(ContentType.JSON)
+                .post("/foo")
+                .then()
+                .log().all()
+                .statusCode(HttpStatus.NO_CONTENT.getCode());
+    }
+
 }
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	(revision b4b82e27440d0aec17411d722c22f80d5e0eb77c)
+++ b/build.gradle.kts	(date 1689599365828)
@@ -15,17 +15,41 @@
 }
 
 dependencies {
+    runtimeOnly("org.yaml:snakeyaml")
+
+    annotationProcessor("org.projectlombok:lombok")
     annotationProcessor("io.micronaut:micronaut-http-validation")
-    implementation("io.micronaut:micronaut-aop")
+    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
+    annotationProcessor("io.micronaut:micronaut-inject-java")
+    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
+    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
+    annotationProcessor("io.micronaut.tracing:micronaut-tracing-opentelemetry-annotation")
+
+    implementation("io.swagger.core.v3:swagger-annotations")
+
+    implementation("io.micronaut:micronaut-http-client")
     implementation("io.micronaut:micronaut-jackson-databind")
-    implementation("io.micronaut.aws:micronaut-aws-sdk-v2")
-    implementation("io.micronaut.cache:micronaut-cache-caffeine")
+    implementation("io.micronaut:micronaut-runtime")
+    implementation("io.micronaut.reactor:micronaut-reactor")
+
+    // Email
+    implementation("io.micronaut.email:micronaut-email-template")
     implementation("io.micronaut.email:micronaut-email-amazon-ses")
     implementation("io.micronaut.email:micronaut-email-template")
+
+    implementation("io.micronaut.validation:micronaut-validation")
+    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
     implementation("io.micronaut.reactor:micronaut-reactor")
     implementation("jakarta.annotation:jakarta.annotation-api")
     runtimeOnly("ch.qos.logback:logback-classic")
     testImplementation("io.micronaut:micronaut-http-client")
+
+    testImplementation("io.micronaut.test:micronaut-test-rest-assured")
+    testImplementation("org.testcontainers:junit-jupiter")
+    testImplementation("org.testcontainers:localstack")
+    testImplementation("org.testcontainers:testcontainers")
+    // Workaround until Test Containers 2.0
+    testImplementation("com.amazonaws:aws-java-sdk-core:1.12.372")
 }
 
 
@@ -39,17 +63,18 @@
 
 graalvmNative.toolchainDetection.set(false)
 micronaut {
-    runtime("netty")
+    runtime("lambda_provided")
     testRuntime("junit5")
     processing {
         incremental(true)
         annotations("com.example.*")
     }
+
     aot {
     // Please review carefully the optimizations enabled below
     // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
-        optimizeServiceLoading.set(false)
-        convertYamlToJava.set(false)
+        optimizeServiceLoading.set(true)
+        convertYamlToJava.set(true)
         precomputeOperations.set(true)
         cacheEnvironment.set(true)
         optimizeClassLoading.set(true)
Index: src/main/resources/views/foo.vm
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/views/foo.vm b/src/main/resources/views/foo.vm
new file mode 100644
--- /dev/null	(date 1689591848512)
+++ b/src/main/resources/views/foo.vm	(date 1689591848512)
@@ -0,0 +1,4 @@
+<html>
+<head>Some Email</head>
+<body>Hello $user</body>
+</html>
\ No newline at end of file
Index: src/main/java/com/example/SomeControllerThatSendsEmail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/SomeControllerThatSendsEmail.java b/src/main/java/com/example/SomeControllerThatSendsEmail.java
new file mode 100644
--- /dev/null	(date 1689592451229)
+++ b/src/main/java/com/example/SomeControllerThatSendsEmail.java	(date 1689592451229)
@@ -0,0 +1,38 @@
+package com.example;
+
+import io.micronaut.email.Email;
+import io.micronaut.email.EmailSender;
+import io.micronaut.email.template.TemplateBody;
+import io.micronaut.http.HttpResponse;
+import io.micronaut.http.HttpStatus;
+import io.micronaut.http.MediaType;
+import io.micronaut.http.annotation.Controller;
+import io.micronaut.http.annotation.Post;
+import io.micronaut.http.annotation.Produces;
+import jakarta.inject.Singleton;
+import reactor.core.publisher.Mono;
+
+import java.util.Map;
+
+@Controller("/foo")
+@Singleton
+public class SomeControllerThatSendsEmail {
+    private final EmailSender<?, ?> emailSender;
+
+    public SomeControllerThatSendsEmail(final EmailSender<?, ?> emailSender) {
+        this.emailSender = emailSender;
+    }
+
+
+    @Post
+    @Produces(MediaType.APPLICATION_JSON)
+    public Mono<? extends HttpResponse<?>> foo() {
+        return Mono.fromCallable(() -> emailSender.send(Email.builder()
+                        .from("foo@foobar.com")
+                        .to("baz@foobar.com")
+                        .subject("Some Email")
+                        .body(new TemplateBody<>("foo", Map.of("name", "bar")))))
+                .map(ignored -> HttpResponse.status(HttpStatus.NO_CONTENT));
+    }
+
+}

